"use strict";
//数据
var data = {
	eT: {
		"Mandelbrot": {
			算法: function(Cx, Cy, m, R_2) {
				// var Cy2=Cy*Cy
				//检查是否在逃逸半径外
				// if ((Cx*Cx + Cy2) > R_2)	return 0
				//检查是否在心脏线内
				// var tmp = Math.sqrt((Cx-0.25)*(Cx-0.25)+Cy2)
				// if (Cx <= tmp * (1 - 2 * tmp) + 0.25) return m
				//检查是否在大圆内
				// if (((Cx+1)*(Cx+1)+Cy2) <= 0.0625) return m
				//非特殊点的处理
				var R = 0, C = 0,tmp
				for (var i = 0; i < m; i++) {
					tmp = (R-C)*(R+C)
					C = 2*R*C + Cy, R = tmp+Cx
					if (R*R+C*C > R_2) return i
				}
				//最大迭代后依旧不逃逸的点
				return m
			},
			/*function(Cx, Cy, m, R_2) {
				var z = new 复数(Cx, Cy)
				//检查是否在逃逸半径外
				if (z.m_2 > R_2)	return 0
				//检查是否在心脏线内
				var tmp = (new 复数(Cx-0.25, Cy)).mod()
				if (Cx <= tmp * (1 - 2 * tmp) + 0.25) return m
				//检查是否在大圆内
				if ((减(z, new 复数(-1, 0))).m_2 <= 0.0625) return m
				//非特殊点的处理
				var z0 = new 复数(0, 0)
				for (var i = 0; i < m; i++) {
					z0 = 加(z0.pow(2), z)
					if (z0.m_2 > R_2) return i
				}
				//最大迭代后依旧不逃逸的点
				return m
			},*/
			参量: [
				[-2, 0.5, -1.14, 1.14, 16, 512, 2],
				[-1.023955472433298,
				 -1.0238389300325947,
				 -0.36252864696515774,
				 -0.3624661159478738, 16, 512, 2],
				[-1.023955,
				 -1.023838,
				 -0.362529,
				 -0.362466, 16, 512, 2]
			]
		},
		"Julia": {
			算法: function(X, Y, m, R_2, cx, cy) {
				var R = cx + X,C=cy+Y,tmp
				//非特殊点的处理
				for (var i = 0; i < m; i++) {
					if (R*R+C*C > R_2) return i
					tmp = (R-C)*(R+C)
					C = 2*R*C+cy, R = tmp+cx
				}
				//最大迭代后依旧不逃逸的点
				return m
			},
			/*function(X, Y, m, R_2, cx, cy) {
				var x2 = X + cx, y2 = Y + cy
				var z = new 复数(cx, cy), z0 = 加(new 复数(X, Y), z)
				//非特殊点的处理
				for (var i = 0; i < m; i++) {
					if (z0.m_2 > R_2) return i
					z0 = 加(z0.pow(2), z)
				}
				//最大迭代后依旧不逃逸的点
				return m
			},*/
			参量: [
				[-0.75, 2.25, -1, 0.8, 24, 256, 50, -0.74543, 0.11301],
				[-1.2, 1.6, -0.7, 1.7, 24, 256, 5, -0.235, -0.515],
				[-1, 2.2, -0.6, 1.4, 24, 256, 50, -0.615, -0.43],
				[-1.2, 1.6, -0.5, 1.8, 24, 256, 50, -0.199, -0.66],
				[-0.75, 2.25, -1, 0.8, 24, 256, 50, -0.77, 0.08]
			]
		},
		"Nova": {
			算法: function(X, Y, m, R_2, n, p, b) {
				var R = b, C = 0,R2AddC2=R*R+C*C
				// var R = X, C = Y,R2AddC2=R*R+C*C
				var nθ=n*Math.atan2(C,R),ρ_n=Math.pow((R2AddC2),n/2)
				var fR = ρ_n*Math.cos(nθ)+n,fC = ρ_n*Math.sin(nθ)
				var dfR,dfC,ffR,ffC,tmp,test
				for (var i = 0; i < m; i++) {
					test=fR*fR+fC*fC
					if(fR*fR+fC*fC < R_2) return i

					nθ=(n-1)*Math.atan2(C,R)
					ρ_n=Math.pow((R2AddC2),(n-1)/2)
					dfR = ρ_n*Math.cos(nθ)*n, dfC = ρ_n*Math.sin(nθ)*n

					tmp = dfR*dfR+dfC*dfC
					ffR=(fR*dfR+fC*dfC)/tmp,ffC=(fC*dfR-fR*dfC)/tmp
					R -= p*ffR+X ,C -= p*ffC+Y
					R2AddC2 = R*R+C*C
					nθ=n*Math.atan2(C,R)
					ρ_n=Math.pow((R2AddC2),n/2)
					fR = ρ_n*Math.cos(nθ)+n, fC = ρ_n*Math.sin(nθ)
				}
				return i
			},// Zn+1 = Zn-p*f(Zn)/f'(Zn)+b
			/*function(X, Y, m, R_2, n, p, C) {
				var z = new 复数(X, Y), zn = z.pow(n)
				var fn = function(z, n) {
					return new 复数(z.a + n, z.b)
				}
				var dfn = function(z, n) {
					return new 复数(n * z.a, n * z.b)
				}
				var a,b,tmp
				for (var i = 0; i < m && (fn(zn, n)).m_2 > R_2; i++) {
					a = (fn(zn, n)).cut(new 复数(1, 0))
					b = dfn(z.pow(n-1), n)
					tmp = 乘(除(a, b),new 复数(R, 0))
					tmp = 加(tmp,new 复数(C, 0))
					z = 减(z, tmp)
				}
				return i
			},*/
			参量: [
				[-3, 3, -3, 3, 16, 40, 0.1, 3, 1.25, 0.015]
			]
		},
		"Newton": {
			算法: function(X, Y, m, R_2, n) {
				var R = X, C = Y,R2AddC2=R*R+C*C
				var nθ=n*Math.atan2(C,R),ρ_n=Math.pow((R2AddC2),n/2)
				var fR = ρ_n*Math.cos(nθ)+n,fC = ρ_n*Math.sin(nθ)
				var dfR,dfC,tmp
				for (var i = 0; i < m; i++) {
					if(fR*fR+fC*fC < R_2) return i

					nθ=(n-1)*Math.atan2(C,R)
					ρ_n=Math.pow((R2AddC2),(n-1)/2)
					dfR = ρ_n*Math.cos(nθ)*n, dfC = ρ_n*Math.sin(nθ)*n

					tmp = dfR*dfR+dfC*dfC
					R -= (fR*dfR+fC*dfC)/tmp ,C -= (fC*dfR-fR*dfC)/tmp
					R2AddC2 = R*R+C*C
					nθ=n*Math.atan2(C,R)
					ρ_n=Math.pow((R2AddC2),n/2)
					fR = ρ_n*Math.cos(nθ)+n, fC = ρ_n*Math.sin(nθ)
				}
				return i
			},
			// f(z) = z^n+n
			// f'(z) = n*z^(n-1)
			// Zn+1 = Zn-f(Zn)/f'(Zn)
			// 终止条件: |f(z)|<ε => |f(z)|^2<R^2
			//time(s)=0.7411*ln(n)+1.0389 (64>=n>=4) R^2=0.9973,
			参量: [
				[-3, 3, -3, 3, 16, 40, 0.1, 1, 3],
				[-10, 10, -10, 10, 16, 400, 0.1, 1, 6],
				[-10, 10, -10, 10, 16, 400, 0.1, 1, 12]
			]
		},
		"Lyapunov": {
			算法: null,
			参量: [
				[-0.75, 2.25, -1, 0.8, 24, 256, 50, 1, 3]
			]
		}
	},
	LS: {
		"分形折线": {
			"Koch曲线": {
				字母: ['F'],
				初始: "F",
				角度: 60,
				规则: [
					["F=F-F++F-F"]
				],
				迭代: 5,
				初始角: 0
			},
			"雪花曲线": {
				字母: ['F'],
				初始: "F++F++F",
				角度: 60,
				规则: [
					["F=F-F++F-F"]
				],
				迭代: 5,
				初始角: 0
			},
			"反雪花曲线": {
				字母: ["F"],
				初始: "F--F--F",
				角度: 60,
				规则: [
					["F=F-F++F-F"]
				],
				迭代: 5,
				初始角: 0
			},
			"王冠": {
				字母: ["F"],
				初始: "F",
				角度: 30,
				规则: [
					["F=+F----F+++++F----F+++++F----F+"]
				],
				迭代: 6,
				初始角: 0
			}
		},
		"分形树": {
			"分形树1": {
				字母: ['F'],
				初始: "F",
				角度: 25,
				规则: [
					["F=F[-F]F[+F]F"]
				],
				迭代: 5,
				初始角: 90
			},
			"分形树2": {
				字母: ['F'],
				初始: "F",
				角度: 20,
				规则: [
					["F=F[+F]F[-F]+F"]
				],
				迭代: 4,
				初始角: 90
			},
			"分形树3": {
				字母: ['F'],
				初始: "F",
				角度: 25,
				规则: [
					["F=F[+F]F[-F+F]"]
				],
				迭代: 7,
				初始角: 90
			},
			"分形树4": {
				字母: ['F'],
				初始: 'F',
				角度: 20,
				规则: [
					["F=FF+[+F-F-F]-[-F+F+F]"]
				],
				迭代: 5,
				初始角: 90
			},
			"分形树5": {
				字母: ['F'],
				初始: 'F',
				角度: 25,
				规则: [
					["F=F[-F][+F]F"]
				],
				迭代: 8,
				初始角: 90
			},
			"分形树6": {
				字母: ['F'],
				初始: 'F',
				角度: 20,
				规则: [
					["F=F[-F][+F][--F]F[++F]F"]
				],
				迭代: 5,
				初始角: 90
			},
			"分形树7": {
				字母: ['F', , 'X'],
				初始: "X",
				角度: 20,
				规则: [
					["F=FF"],
					["X=F[+X]F[-X]+X"]
				],
				初始角: 90,
				迭代: 7
			},
			"分形树8": {
				字母: ['F', , 'XY'],
				初始: "X",
				角度: 2,
				规则: [
					["X=XFY[+++++XFX][-----XFX]"],
					["Y=F-YF"]
				],
				初始角: 90,
				迭代: 6
			},
			"分形树9": {
				字母: ['F', , 'X'],
				初始: "X",
				角度: 25.7,
				规则: [
					["F=FF"],
					["X=F[+X][-X]FX"]
				],
				初始角: 90,
				迭代: 7
			},
			"分形树10": {
				字母: ['F', , 'XY'],
				初始: "X",
				角度: 30,
				规则: [
					["X=FX[-FYF][+FYF]XF"],
					["Y=YFX[+Y][-Y]"]
				],
				初始角: 90,
				迭代: 6
			},
			"分形树11": {
				字母: ['F', , 'XY'],
				初始: "X",
				角度: 30,
				规则: [
					["X=[+FXF][-FXF]YX"],
					["Y=YFY"]
				],
				初始角: 90,
				迭代: 7
			}
		},
		"字形": {
			"龙曲线": {
				字母: ['F', , 'XYf'],
				初始: "FX",
				角度: 45,
				规则: [
					["F=f"],
					["X=-FX++FY-"],
					["Y=+FX--FY+"]
				],
				初始角: 0,
				迭代: 15
			},
			"C曲线": {
				字母: ['F'],
				初始: "F",
				角度: 45,
				规则: [
					["F=+F--F+"],
				],
				初始角: 0,
				迭代: 14
			},
			"“止”曲线": {
				字母: ['F'],
				初始: "F+F+F+F",
				角度: 90,
				规则: [
					["F=F+F-F-FFF+F+F-F"],
				],
				初始角: 0,
				迭代: 3
			},
			"环形肠": {
				字母: ['F'],
				初始: "F-F-F-F-",
				角度: 90,
				规则: [
					["F=FF-F-F-F-F-F+F"],
				],
				初始角: 0,
				迭代: 4
			}
		},
		"Peano曲线": {
			"Peano曲线": {
				字母: ['F', , 'XY'],
				初始: "X",
				角度: 90,
				规则: [
					["X=-YF+XFX+FY-"],
					["Y=+XF-YFY-FX+"]
				],
				初始角: 0,
				迭代: 8
			},
			"Peano曲线2": {
				字母: ['F', , 'XY'],
				初始: "X",
				角度: 90,
				规则: [
					["X=XFYFX+F+YFXFY-F-XFYFX"],
					["Y=YFXFY-F-XFYFX+F+YFXFY"]
				],
				初始角: 0,
				迭代: 5
			},
			"Peano曲线3": {
				字母: ['F', , 'XY'],
				初始: "-Y",
				角度: 90,
				规则: [
					["X=-YFYF+XFXFX+F+XF-YFY-FX"],
					["Y=YF+XFX+FY-F-YFYFY-FXFX+"]
				],
				初始角: 0,
				迭代: 5
			},
			"Peano曲线4": {
				字母: ['F', , 'XY'],
				初始: "XF",
				角度: 45,
				规则: [
					["X=XF+F+YF-F-XF-F-YF-F-XF+F+YF+F+XF+F+YF-F-X"],
					["Y=YF-F-XF+F+YF+F+XF+F+YF-F-XF-F-YF-F-XF+F+Y"]
				],
				初始角: 45,
				迭代: 4
			},
			"Peano曲线5": {
				字母: ['F', , 'XY'],
				初始: "X--F--X--F",
				角度: 45,
				规则: [
					["X=+Y-F-Y+"],
					["Y=-X+F+X-"]
				],
				初始角: 45,
				迭代: 14
			}
		},
		"手帕曲线": {
			"手帕曲线1": {
				字母: ['F'],
				初始: "F-F-F-F",
				角度: 90,
				规则: [
					["F=F[F]-F+F[--F]+F-F"],
				],
				初始角: 0,
				迭代: 5
			},
			"手帕曲线2": {
				字母: ['F'],
				初始: "F-F-F-F",
				角度: 90,
				规则: [
					["F=FF[-F-F-F]F"],
				],
				初始角: 0,
				迭代: 5
			}
		},
		"其他": {
			"范例(飞镖)": {
				字母: ["F,R", "f,r", "X,Y"],
				初始: "F++F++F",
				角度: 60,
				规则: [
					["F=F-R++F-F", ],
					["R=r-X++f-Y", ]
				],
				迭代: 4,
				初始角: 0
			},
			"准晶体": {
				字母: ["F"],
				初始: "F++F++F++F++F",
				角度: 36,
				规则: [
					["F=F++F++F|F-F++F"]
				],
				迭代: 5,
				初始角: 0
			}
		}
	},
	IFS: {
		"分形植物": {
			"羊齿叶": [
				[0, 0, 0, 0.16, 0, 0, 0.01],
				[0.85, 0.04, -0.04, 0.85, 0, 1.6, 0.85],
				[0.2, -0.26, 0.23, 0.22, 0, 1.6, 0.07],
				[-0.15, 0.28, 0.46, 0.24, 0, 0.44, 0.07]
			],
			"蕨叶": [
				[0, 0, 0, 0.25, 0, -0.14, 0.02],
				[0.85, 0.02, -0.02, 0.83, 0, 1, 0.84],
				[0.09, -0.28, 0.3, 0.11, 0, 0.6, 0.07],
				[0.09, 0.25, 0.3, 0.09, 0, 0.7, 0.07]
			],
			"树1": [
				[-0.04, 0, -0.19, -0.47, -0.12, 0.3, 0.25],
				[0.65, 0, 0, 0.56, 0.06, 1.56, 0.25],
				[0.41, 0.46, -0.39, 0.61, 0.46, 0.4, 0.25],
				[0.52, -0.35, 0.25, 0.74, -0.48, 0.38, 0.25]
			],
			"树2": [
				[0.05, 0, 0, 0.6, 0, 0, 0.1],
				[0.05, 0, 0, -0.5, 0, 1, 0.1],
				[0.46, 0.32, -0.386, 0.383, 0, 0.6, 0.2],
				[0.47, -0.154, 0.171, 0.423, 0, 1, 0.2],
				[0.43, 0.275, -0.26, 0.476, 0, 1, 0.2],
				[0.421, -0.357, 0.354, 0.307, 0, 0.7, 0.2]
			],
			"嫩枝": [
				[0.387, 0.43, 0.43, -0.387, 0.256, 0.522, 0.333],
				[0.441, -0.091, -0.009, -0.322, 0.4219, 0.5059, 0.333],
				[-0.468, 0.020, -0.113, 0.015, 0.4, 0.4, 0.334]
			],
			"树叶": [
				[-0.82, 0.16, -0.16, 0.81, 137, 14, 0.5],
				[0.44, 0.32, -0.07, 0.61, -3, 70, 0.5]
			],
			"蟹爪兰": [
				[0.8, 0, 0, -0.8, 0, 0, 0.5],
				[0.4, -0.2, 0.2, 0.4, 1.1, 0, 0.5]
			],
			"龙爪兰": [
				[0.5, 0.25, 0.25, -0.5, 0, 0, 0.5],
				[0.75, -0.25, 0.25, 0.75, 0.75, 0, 0.5]
			],
			"枫叶": [
				[0.6, 0, 0, 0.6, 0.18, 0.36, 0.25],
				[0.6, 0, 0, 0.6, 0.18, 0.12, 0.25],
				[0.4, 0.3, -0.3, 0.4, 0.27, 0.36, 0.25],
				[0.4, -0.3, 0.3, 0.4, 0.27, 0.09, 0.25]
			]
		},
		"其它": {
			"spki三角": [
				[0.5, 0, 0, 0.5, 0, 0, 0.333],
				[0.5, 0, 0, 0.5, 0.5, 0, 0.333],
				[0.5, 0, 0, 0.5, 0.25, 0.5, 0.333]
			],
			"雪花曲线": [
				[0.333333, 0, 0, 0.333333, 0, 0, 0.25],
				[0.166666, 0.288675, -0.288675, 0.166666, 0.333333, 0, 0.25],
				[0.166666, -0.288675, 0.288675, 0.166666, 0.5, -0.288675, 0.25],
				[0.333333, 0, 0, 0.333333, 0.666666, 0, 0.25]
			],
			"龙曲线": [
				[0.5, 0.5, -0.5, 0.5, 1, 0, 0.5],
				[0.5, 0.5, -0.5, 0.5, -1, 0, 0.5]
			]
		}
	},
	IFS_CS: {
		"羊齿叶": [70, 200, 0],
		"蕨叶": [100, 100, 200],
		"树1": [120, 400, 160],
		"树2": [250, 200, 0],
		"嫩枝": [600, 0, 0],
		"树叶": [4, 100, 0],
		"蟹爪兰": [400, 0, 200],
		"龙爪兰": [300, 0, 160],
		"枫叶": [800, 100, 0],
		"spki三角": [600, 100, 0],
		"雪花曲线": [1000, 0, 300],
		"龙曲线": [200, 480, 350]
	},
	DG: {
		"分形树": {
			"树一": 12,
			"树二": 5,
			"树三": 5,
			"树四": 5
		},
		"分形折线": {
			"Kont曲线": 4,
			"雪花": 3,
			"Arboresent肺": 4,
			"Hilbert_Peano曲线": 4,
			"C曲线": 14
		},
		"分形镂空": {
			"Sierpinski三角": 6,
			"Sierpinski地毯": 4
		},
		"其它": {
			"Cantor三分集": 6
		}
	},
	IFS3D: {
		"分形植物": {
			"羊齿叶": [
				[0, 0, 0, 0.16, 0, 0, 0.01],
				[0.85, 0.04, -0.04, 0.85, 0, 1.6, 0.85],
				[0.2, -0.26, 0.23, 0.22, 0, 1.6, 0.07],
				[-0.15, 0.28, 0.46, 0.24, 0, 0.44, 0.07]
			],
			"蕨叶": [
				[0, 0, 0, 0.25, 0, -0.14, 0.02],
				[0.85, 0.02, -0.02, 0.83, 0, 1, 0.84],
				[0.09, -0.28, 0.3, 0.11, 0, 0.6, 0.07],
				[0.09, 0.25, 0.3, 0.09, 0, 0.7, 0.07]
			],
			"树1": [
				[-0.04, 0, -0.19, -0.47, -0.12, 0.3, 0.25],
				[0.65, 0, 0, 0.56, 0.06, 1.56, 0.25],
				[0.41, 0.46, -0.39, 0.61, 0.46, 0.4, 0.25],
				[0.52, -0.35, 0.25, 0.74, -0.48, 0.38, 0.25]
			],
			"树2": [
				[0.05, 0, 0, 0.6, 0, 0, 0.1],
				[0.05, 0, 0, -0.5, 0, 1, 0.1],
				[0.46, 0.32, -0.386, 0.383, 0, 0.6, 0.2],
				[0.47, -0.154, 0.171, 0.423, 0, 1, 0.2],
				[0.43, 0.275, -0.26, 0.476, 0, 1, 0.2],
				[0.421, -0.357, 0.354, 0.307, 0, 0.7, 0.2]
			],
			"嫩枝": [
				[0.387, 0.43, 0.43, -0.387, 0.256, 0.522, 0.333],
				[0.441, -0.091, -0.009, -0.322, 0.4219, 0.5059, 0.333],
				[-0.468, 0.020, -0.113, 0.015, 0.4, 0.4, 0.334]
			],
			"树叶": [
				[-0.82, 0.16, -0.16, 0.81, 137, 14, 0.5],
				[0.44, 0.32, -0.07, 0.61, -3, 70, 0.5]
			],
			"蟹爪兰": [
				[0.8, 0, 0, -0.8, 0, 0, 0.5],
				[0.4, -0.2, 0.2, 0.4, 1.1, 0, 0.5]
			],
			"龙爪兰": [
				[0.5, 0.25, 0.25, -0.5, 0, 0, 0.5],
				[0.75, -0.25, 0.25, 0.75, 0.75, 0, 0.5]
			],
			"枫叶": [
				[0.6, 0, 0, 0.6, 0.18, 0.36, 0.25],
				[0.6, 0, 0, 0.6, 0.18, 0.12, 0.25],
				[0.4, 0.3, -0.3, 0.4, 0.27, 0.36, 0.25],
				[0.4, -0.3, 0.3, 0.4, 0.27, 0.09, 0.25]
			],
		},
		"其它": {
			"spki三角": [
				[0.5, 0, 0, 0.5, 0, 0, 0.333],
				[0.5, 0, 0, 0.5, 0.5, 0, 0.333],
				[0.5, 0, 0, 0.5, 0.25, 0.5, 0.333]
			],
			"雪花曲线": [
				[0.333333, 0, 0, 0.333333, 0, 0, 0.25],
				[0.166666, 0.288675, -0.288675, 0.166666, 0.333333, 0, 0.25],
				[0.166666, -0.288675, 0.288675, 0.166666, 0.5, -0.288675, 0.25],
				[0.333333, 0, 0, 0.333333, 0.666666, 0, 0.25]
			],
			"龙曲线": [
				[0.5, 0.5, -0.5, 0.5, 1, 0, 0.5],
				[0.5, 0.5, -0.5, 0.5, -1, 0, 0.5]
			]
		}
	}
}
var cache = {
	//eT:
	LS: [{
		初始: ["F"],
		计数: [],
		规则: [{
			LSRul: "F=F-F++F-F"
		}]
	}],
	//IFS:
	//DG:
}